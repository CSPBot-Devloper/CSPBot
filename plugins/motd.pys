import socket
import time
import uuid
import json
import struct
import bot

'''
class StatusPing:
    """ Get the ping status for the Minecraft server """

    def __init__(self, host='localhost', port=25565, timeout=5):
        """ Init the hostname and the port """
        self._host = host
        self._port = port
        self._timeout = timeout

    def _unpack_varint(self, sock):
        """ Unpack the varint """
        data = 0
        for i in range(5):
            ordinal = sock.recv(1)

            if len(ordinal) == 0:
                break

            byte = ord(ordinal)
            data |= (byte & 0x7F) << 7 * i

            if not byte & 0x80:
                break

        return data

    def _pack_varint(self, data):
        """ Pack the var int """
        ordinal = b''

        while True:
            byte = data & 0x7F
            data >>= 7
            ordinal += struct.pack('B', byte | (0x80 if data > 0 else 0))

            if data == 0:
                break

        return ordinal

    def _pack_data(self, data):
        """ Page the data """
        if type(data) is str:
            data = data.encode('utf8')
            return self._pack_varint(len(data)) + data
        elif type(data) is int:
            return struct.pack('H', data)
        elif type(data) is float:
            return struct.pack('Q', int(data))
        else:
            return data

    def _send_data(self, connection, *args):
        """ Send the data on the connection """
        data = b''

        for arg in args:
            data += self._pack_data(arg)

        connection.send(self._pack_varint(len(data)) + data)

    def _read_fully(self, connection, extra_varint=False):
        """ Read the connection and return the bytes """
        packet_length = self._unpack_varint(connection)
        packet_id = self._unpack_varint(connection)
        byte = b''

        if extra_varint:
            # Packet contained netty header offset for this
            if packet_id > packet_length:
                self._unpack_varint(connection)

            extra_length = self._unpack_varint(connection)

            while len(byte) < extra_length:
                byte += connection.recv(extra_length)

        else:
            byte = connection.recv(packet_length)

        return byte

    def get_status(self):
        """ Get the status response """
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as connection:
                connection.settimeout(self._timeout)
                connection.connect((self._host, self._port))

                # Send handshake + status request
                self._send_data(connection, b'\x00\x00', self._host, self._port, b'\x01')
                self._send_data(connection, b'\x00')

                # Read response, offset for string length
                data = self._read_fully(connection, extra_varint=True)

                # Send and read unix time
                self._send_data(connection, b'\x01', time.time() * 1000)
                unix = self._read_fully(connection)

            # Load json and return
            response = json.loads(data.decode('utf8'))
            response['ping'] = int(time.time() * 1000) - struct.unpack('Q', unix)[0]
            response['type'] = "success"
            return response
        except:
            return {"type":"error","message":"Could not connect to server"}

def GetDataJE(JE_HOST: str, JE_PORT: int):
    status = StatusPing(host=JE_HOST, port=JE_PORT)
    Cleaning = status.get_status()
    return json.dumps(Cleaning)'''

def GetData(BE_HOST: str, BE_PORT: int):
    BE_IP = socket.gethostbyname(BE_HOST)
    # 执行查询指令
    # 此处进行编码转换 base64 -> utf-8
    addr = (BE_IP, BE_PORT)  # 定义目标地址及端口
    # 生成GUID，在C++中此值称为GUID，在Python中却叫UUID
    UUID = str(uuid.uuid1()).upper().split("-")
    TIME = int((time.perf_counter())*10000000)  # 获取程序已启动时间，精准至小数后5位
    tickcounttime = '%016d' % TIME  # 将启动时间填充零至16字节
    STR = "01"+str(tickcounttime) + "00FFFF00FEFEFEFEFDFDFDFD12345678" + UUID[2]+UUID[4]  # 缝合数据包
    STR1 = bytes.fromhex(STR)  # 将数据包转换为16进制
    try:  # 尝试连接
        # 定义socket为UDP 内部大写字符为socket的特征码，详情请查阅相关资料
        UDPC = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        socket.socket.settimeout(UDPC, 1)  # 设置超时时间为5秒
        socket.socket.connect(UDPC, addr)  # 连接远程地址
        UDPC.sendto(STR1, addr)  # 发送数据包
        rec = socket.socket.recvfrom(UDPC, 1024)  # 设置接收缓冲区
        Cleaning = str(rec).split(';')
        rtj = {
            "status": "online",
            "Name":Cleaning[1],
            "Players":Cleaning[4],
            "MaxPlayers":Cleaning[5],
            "Version":Cleaning[3],
            "GameMode":Cleaning[8],
            "IPv4":Cleaning[10],
            "IPv6":Cleaning[11],
            "Ping":Cleaning[9],
            "LevelName":Cleaning[7],
            "ProtocolVersion":Cleaning[2],
        }
        return json.dumps(rtj)
    except:
        return json.dumps({"status": "offline"})

def sb(data):
    Logger = bot.Logger("sidh")
    Logger.info(data["msg"])

bot.setListener("onReceiveMsg",sb)