name: Windows
on: 
  # push代码时触发workflow
  push:
    paths:
      - '*.pro'
      - '**'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      - '*.pro'
      - '**'
      - '.github/workflows/windows.yml' 
jobs:
  build:
    name: Build
    # 运行平台， windows-latest目前是windows server 2019 
    # 参考文档 https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest
    strategy:
      # 矩阵配置
      matrix:
        include:
          - qt_ver: 5.14.2            
            qt_arch: win64_msvc2017_64
            msvc_arch: x64
            qt_arch_install: msvc2017_64
            

    env:
      targetName: CSPBot
    # 步骤
    steps:
      # 安装Qt
      - name: Install Qt
        # 使用外部action。这个action专门用来安装Qt
        uses: jurplel/install-qt-action@v2
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          # target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: 'false'
          dir: 'D:\Qt\Qt5.14.2'
          aqtversion: '==2.0.5'    

      # 拉取代码
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1

      #添加PATH
      - name: add Path
        id: addpath
        shell: powershell
        run: |
          Get-ChildItem D:\Qt\Qt5.14.2\Qt\5.14.2\msvc2017_64\

      # msvc编译
      - name: msvc-build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          set DefaultQtVersion=D:\Qt\Qt5.14.2\Qt\5.14.2\msvc2017_64\bin
          set QTDIR=D:\Qt\Qt5.14.2\Qt\5.14.2\msvc2017_64\bin
          MSBuild.exe ./CSPBot.sln -property:Configuration=Release

      - name: MkDirs
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          mkdir D:/out/BuildConfig
          mkdir D:/out/BuildConfig/config
          mkdir D:/out/BuildConfig/data
    
      - name: Copy Out Files
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          cp -r BuildConfig/** D:/out/BuildConfig
          cp x64/Release/*.exe D:/out/BuildConfig
          cp config/*.yml D:/out/BuildConfig/config
          cp data/*.yml D:/out/BuildConfig/data
        shell: bash

      - name: Upload plugins
        uses: actions/upload-artifact@v1.0.0
        with:
          name: CSPBot
          path: D:/out/BuildConfig

      - name: Compress to zip
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          7z a D:/out/CSPBot.zip D:/out/BuildConfig
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: CSPBot Release ${{env.RELEASE_TAG}}
          body_path: ./CHANGELOG.md
          files: |
            D:/out/CSPBot.zip
        env:
            GITHUB_REPOSITORY: HuoHuas001/CSPBot

      - name: Upload to OSS
        uses: tvrcgo/upload-to-oss@v0.1.1
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: oss-cn-hongkong
          bucket: huohua-core-1300379610
          asset-path: D:/out/CSPBot.zip
          target-path: /core/${{ github.ref_name }}-${{ steps.vars.outputs.sha_short }}/


  Clean:
    runs-on: ubuntu-latest
    if: ${{ always() }} # 防止前面三者跑着跑着报错，这一步骤不执行导致libs删不掉的现象发生
    needs: [build]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: libs
